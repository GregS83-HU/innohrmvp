// src/app/api/happiness/chat/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

// Types
interface PermaScores {
  positive?: number;
  engagement?: number;
  relationships?: number;
  meaning?: number;
  accomplishment?: number;
  work_life_balance?: number;
}

// Questions structur√©es bas√©es sur PERMA-W
const permaQuestions = [
  {
    step: 1,
    dimension: 'positive',
    question: "Pour commencer, parlez-moi de votre humeur g√©n√©rale au travail cette semaine. Comment vous sentez-vous quand vous arrivez au bureau le matin ?"
  },
  {
    step: 2,
    dimension: 'positive',
    question: "Quand avez-vous ressenti de la joie ou du plaisir dans votre travail r√©cemment ? Pouvez-vous me donner un exemple concret ?"
  },
  {
    step: 3,
    dimension: 'engagement',
    question: "D√©crivez-moi un moment r√©cent o√π vous √©tiez compl√®tement absorb√©(e) par votre travail, o√π le temps passait sans que vous vous en rendiez compte."
  },
  {
    step: 4,
    dimension: 'engagement',
    question: "Dans quelle mesure sentez-vous que vos comp√©tences sont bien utilis√©es dans votre poste actuel ?"
  },
  {
    step: 5,
    dimension: 'relationships',
    question: "Comment d√©cririez-vous la qualit√© de vos relations avec vos coll√®gues ? Avez-vous des personnes sur qui vous pouvez compter au travail ?"
  },
  {
    step: 6,
    dimension: 'relationships',
    question: "Vous sentez-vous √©cout√©(e) et valoris√©(e) par votre manager et votre √©quipe ?"
  },
  {
    step: 7,
    dimension: 'meaning',
    question: "En quoi votre travail a-t-il du sens pour vous ? Comment contribuez-vous √† quelque chose de plus grand ?"
  },
  {
    step: 8,
    dimension: 'meaning',
    question: "Vos valeurs personnelles sont-elles align√©es avec celles de votre entreprise ? Pouvez-vous m'expliquer ?"
  },
  {
    step: 9,
    dimension: 'accomplishment',
    question: "De quoi √™tes-vous le plus fier/fi√®re dans votre travail ces derniers mois ?"
  },
  {
    step: 10,
    dimension: 'accomplishment',
    question: "Comment percevez-vous votre progression professionnelle ? Atteignez-vous vos objectifs ?"
  },
  {
    step: 11,
    dimension: 'work_life_balance',
    question: "Comment g√©rez-vous l'√©quilibre entre votre vie professionnelle et personnelle ? Arrivez-vous √† d√©connecter ?"
  },
  {
    step: 12,
    dimension: 'work_life_balance',
    question: "Pour terminer, y a-t-il quelque chose que vous aimeriez changer dans votre situation professionnelle actuelle ?"
  }
];

// Fonction pour analyser la r√©ponse et attribuer un score
function analyzeResponseAndScore(response: string, dimension: keyof PermaScores): number {
  const lowerResponse = response.toLowerCase();
  
  // Mots positifs et n√©gatifs par dimension
  const positiveWords: Record<string, string[]> = {
    positive: ['heureux', 'content', 'joyeux', 'motiv√©', 'enthousiaste', 'satisfait', '√©panoui', 'bien', 'super', 'g√©nial', 'excellent', 'formidable'],
    engagement: ['passionn√©', 'absorb√©', 'concentr√©', 'impliqu√©', 'engag√©', 'stimulant', 'd√©fi', 'flow', 'comp√©tences', 'talents'],
    relationships: ['soutien', '√©quipe', 'collaboration', 'confiance', 'amical', 'respectueux', 'communication', '√©coute', 'bienveillant'],
    meaning: ['sens', 'mission', 'impact', 'contribution', 'valeurs', 'purpose', 'utile', 'important', 'significatif', 'align√©'],
    accomplishment: ['fier', 'r√©ussite', 'objectifs', 'progression', 'succ√®s', 'accomplissement', 'performance', 'r√©sultats'],
    work_life_balance: ['√©quilibre', 'd√©connexion', 'temps', 'famille', 'loisirs', 'repos', 'flexible', 'horaires', 'vacances']
  };

  const negativeWords: Record<string, string[]> = {
    positive: ['triste', 'd√©motiv√©', 'ennuy√©', 'frustr√©', 'd√©prim√©', 'malheureux', 'stress', 'anxieux', 'difficile', 'p√©nible'],
    engagement: ['ennuyeux', 'r√©p√©titif', 'monotone', 'd√©sengag√©', 'sous-utilis√©', 'comp√©tences g√¢ch√©es', 'routine'],
    relationships: ['conflit', 'isol√©', 'incompris', 'tension', 'communication difficile', 'seul', 'ignor√©'],
    meaning: ['inutile', 'vide', 'sans sens', 'd√©salignement', 'contradiction', 'valeurs oppos√©es'],
    accomplishment: ['√©chec', 'stagnation', 'r√©gression', 'objectifs non atteints', 'd√©√ßu', 'insatisfait'],
    work_life_balance: ['d√©bord√©', '√©puis√©', 'burn-out', 'pas de temps', 'toujours connect√©', 'sacrifice']
  };

  let score = 5; // Score neutre de base
  
  // Compter les mots positifs
  const dimPositive = positiveWords[dimension] || [];
  const positiveCount = dimPositive.filter(word => lowerResponse.includes(word)).length;
  
  // Compter les mots n√©gatifs
  const dimNegative = negativeWords[dimension] || [];
  const negativeCount = dimNegative.filter(word => lowerResponse.includes(word)).length;
  
  // Ajuster le score
  score += positiveCount * 1.5;
  score -= negativeCount * 1.5;
  
  // Analyse de la longueur et du sentiment g√©n√©ral
  if (response.length > 100) {
    score += 0.5; // R√©ponse d√©taill√©e = engagement
  }
  
  // Assurer que le score reste entre 1 et 10
  return Math.min(10, Math.max(1, Math.round(score * 10) / 10));
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message } = body;
    
    // R√©cup√©rer le token de session
    const sessionToken = request.headers.get('x-session-token');
    
    if (!sessionToken) {
      return NextResponse.json(
        { error: 'Token de session manquant' },
        { status: 401 }
      );
    }

    // R√©cup√©rer la session depuis Supabase
    const { data: session, error: sessionError } = await supabase
      .from('happiness_sessions')
      .select('*')
      .eq('session_token', sessionToken)
      .single();
    
    if (sessionError || !session) {
      console.error('Session retrieval error:', sessionError);
      return NextResponse.json(
        { error: 'Session introuvable' },
        { status: 404 }
      );
    }

    // V√©rifier si la session est expir√©e
    if (session.timeout_at && new Date() > new Date(session.timeout_at)) {
      await supabase
        .from('happiness_sessions')
        .update({ status: 'timeout' })
        .eq('session_token', sessionToken);
      
      return NextResponse.json(
        { error: 'Session expir√©e' },
        { status: 410 }
      );
    }

    if (session.status === 'completed') {
      return NextResponse.json(
        { error: '√âvaluation d√©j√† termin√©e' },
        { status: 400 }
      );
    }

    // R√©cup√©rer les donn√©es actuelles de la session
    let currentStep = session.current_step || 0;
    let permaScores: PermaScores = session.perma_scores || {};
    
    // Analyser la r√©ponse et mettre √† jour les scores PERMA
    const currentQuestion = permaQuestions[currentStep - 1];
    if (currentQuestion) {
      const score = analyzeResponseAndScore(message, currentQuestion.dimension as keyof PermaScores);
      
      const updatedPermaScores = {
        ...permaScores,
        [currentQuestion.dimension]: score
      };
      
      permaScores = updatedPermaScores;
    }

    // Passer √† l'√©tape suivante
    currentStep += 1;

    let response: string;
    let completed = false;

    if (currentStep <= permaQuestions.length) {
      // Poser la question suivante
      const nextQuestion = permaQuestions[currentStep - 1];
      response = nextQuestion.question;
    } else {
      // √âvaluation termin√©e
      completed = true;
      
      const avgScore = Object.keys(permaScores).length > 0 
        ? Object.values(permaScores).reduce((a, b) => a + b, 0) / Object.keys(permaScores).length
        : 5;

      response = `Merci beaucoup pour vos r√©ponses sinc√®res ! üéâ

Votre √©valuation est maintenant termin√©e. Voici un bref aper√ßu de vos r√©sultats :

**Score g√©n√©ral de bien-√™tre au travail : ${Math.round(avgScore * 10) / 10}/10**

${avgScore >= 8 
  ? "F√©licitations ! Vous semblez tr√®s √©panoui(e) dans votre travail. Continuez ainsi ! üòä"
  : avgScore >= 6 
  ? "Votre bien-√™tre au travail est globalement positif, avec quelques axes d'am√©lioration possibles. üôÇ"
  : "Il semble y avoir des d√©fis importants dans votre bien-√™tre professionnel. N'h√©sitez pas √† en parler avec votre manager ou RH. üíô"
}

Cette √©valuation est anonyme et aidera √† am√©liorer le bien-√™tre g√©n√©ral dans l'entreprise.`;
    }

    // Mettre √† jour la session dans Supabase
    const updateData = {
      current_step: currentStep,
      perma_scores: permaScores,
      status: completed ? 'completed' : 'in_progress',
      updated_at: new Date().toISOString(),
      ...(completed && { completed_at: new Date().toISOString() })
    };

    const { error: updateError } = await supabase
      .from('happiness_sessions')
      .update(updateData)
      .eq('session_token', sessionToken);

    if (updateError) {
      console.error('Session update error:', updateError);
      return NextResponse.json(
        { error: 'Erreur mise √† jour session' },
        { status: 500 }
      );
    }

    // Sauvegarder le message et la r√©ponse dans les messages
    const { error: messageError } = await supabase
      .from('happiness_messages')
      .insert([
        {
          session_id: session.id,
          message_type: 'user',
          content: message,
          created_at: new Date().toISOString()
        },
        {
          session_id: session.id,
          message_type: 'assistant',
          content: response,
          created_at: new Date().toISOString()
        }
      ]);

    if (messageError) {
      console.error('Message save error:', messageError);
      // Ne pas faire √©chouer la requ√™te pour √ßa
    }

    const sessionUpdate: {
      response: string;
      step: number;
      completed: boolean;
      scores: PermaScores;
    } = {
      response,
      step: currentStep,
      completed,
      scores: permaScores
    };

    return NextResponse.json(sessionUpdate);

  } catch (error) {
    console.error('Erreur dans POST /api/happiness/chat:', error);
    return NextResponse.json(
      { error: 'Erreur serveur interne' },
      { status: 500 }
    );
  }
}